if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Path to oh-my-zsh configuration
export ZSH=$HOME/.oh-my-zsh
ZSH_THEME="powerlevel10k/powerlevel10k"
plugins=(
  git
  alias-tips
  zsh-autosuggestions
  zsh-syntax-highlighting
)
source $ZSH/oh-my-zsh.sh

# zoxide
eval "$(zoxide init zsh)"

# nvm
export NVM_DIR="$HOME/.nvm"
[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

autoload -U add-zsh-hook
load-nvmrc() {
    local node_version
    node_version="$(nvm version)"
    local nvmrc_path
    nvmrc_path="$(nvm_find_nvmrc)"

    if [ -n "$nvmrc_path" ]; then
        local nvmrc_node_version
        nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

        if [ "$nvmrc_node_version" = "N/A" ]; then
            nvm install
        elif [ "$nvmrc_node_version" != "$node_version" ]; then
            nvm use
        fi
    elif [ "$node_version" != "$(nvm version default)" ]; then
        echo "Reverting to nvm default version"
        nvm use default
    fi
}
add-zsh-hook chpwd load-nvmrc
load-nvmrc

# ALIASES

bindkey "^ " forward-word
alias gw="git sweep"
alias gwc="git sweep-check"
alias cat="bat"
alias speed="speedtest-cli"
alias notify="tput bel"
alias h="history"
alias g="grep"
alias c="cargo"
alias sail="[ -f sail ] && bash sail || bash vendor/bin/sail"

# Enable lsd instead of ls, if it is installed
if [ "$(command -v lsd)" ]; then
    alias ls='lsd'
    alias l='ls -l'
    alias la='ls -a'
    alias ll='ls -la'
    alias lla='ls -la'
fi

# Theme config
DEFAULT_USER=$USER
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(dir_writable dir vcs)
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=()
POWERLEVEL9K_SHORTEN_DIR_LENGTH=1
POWERLEVEL9K_SHORTEN_STRATEGY="truncate_from_right"
POWERLEVEL9K_SHORTEN_DELIMITER=""

# openssh from brew
export PATH=/usr/local/bin:$PATH

# coreutils
export PATH=/usr/local/opt/coreutils/libexec/gnubin:$PATH

# Node global commands path
export PATH=/usr/local/Cellar/node/15.12.0/bin:$PATH

# React-Native env variables
export ANDROID_HOME=$HOME/Library/Android/sdk
export PATH=$PATH:$ANDROID_HOME/emulator
export PATH=$PATH:$ANDROID_HOME/tools
export PATH=$PATH:$ANDROID_HOME/tools/bin
export PATH=$PATH:$ANDROID_HOME/platform-tools

# PHP env variables
export PATH=/usr/local/opt/php@7.4/bin:$PATH
export PATH=/usr/local/opt/php@7.4/sbin:$PATH

# Rust Cross-compiling
export CC_x86_64_unknown_linux_gnu=x86_64-unknown-linux-gnu-gcc
export CXX_x86_64_unknown_linux_gnu=x86_64-unknown-linux-gnu-g++
export AR_x86_64_unknown_linux_gnu=x86_64-unknown-linux-gnu-ar
export CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=x86_64-unknown-linux-gnu-gcc
export CC_aarch64_unknown_linux_gnu=aarch64-unknown-linux-gnu-gcc
export CXX_aarch64_unknown_linux_gnu=aarch64-unknown-linux-gnu-g++
export AR_aarch64_unknown_linux_gnu=aarch64-unknown-linux-gnu-ar
export CARGO_TARGET_aarch64_UNKNOWN_LINUX_GNU_LINKER=aarch64-unknown-linux-gnu-gcc

# jenv
export PATH="$HOME/.jenv/bin:$PATH"
eval "$(jenv init -)"

# Needed for CocoaPods
export LANG=en_US.UTF-8

# Needed for Android JDK
export JAVA_HOME="/Library/Java/JavaVirtualMachines/zulu-17.jdk/Contents/Home"

# Custom commands

propic() {
    echo ">>>> downloading propic <<<<"
    curl -o propic.jpeg "https://gravatar.com/avatar/3d2746ae6d5b422213088b12ebab1131?s=1000"
}

find_raspberry() {
    arp -na | grep -i "28:cd:c1\|b8:27:eb\|dc:a6:32\|e4:5f:1" | awk -F "[()]" '{print $2}'
}

find_raspberry_loop() {
    while true;
    do
        OUTPUT=$(arp -na | grep -i "28:cd:c1\|b8:27:eb\|dc:a6:32\|e4:5f:1" | awk -F "[()]" '{print $2}')
        if ! [ -z "$OUTPUT" ]
        then
            echo $OUTPUT
        fi
        
        sleep 2
    done
}

listen_raspberry() {
    while true;
    do
        OUTPUT=$(arp -na | grep -i "28:cd:c1\|b8:27:eb\|dc:a6:32\|e4:5f:1" | awk -F "[()]" '{print $2}')
        if ! [ -z "$OUTPUT" ]
        then
            echo $OUTPUT
            break
        fi

        sleep 2
    done
}

# Mobile development

clean_derived_data() {
    echo ">>>> cleaning Xcode DerivedData folder <<<<"
    rm -rf ~/Library/Developer/Xcode/DerivedData
}

clean_rn_ios() {
    echo ">>>> clean_rn_ios <<<<"
    echo ">>>> yarn install, pod install and run on iOS <<<<"
    yarn
    cd ios
    pod install
    cd ..
    yarn ios
}

clean_rn_android() {
    echo ">>>> clean_rn_android <<<<"
    echo ">>>> yarn install, clear Gradle cache and run on Android <<<<"
    yarn
    cd android
    ./gradlew clean
    # ./gradlew cleanBuildCache
    cd ..
    yarn android
}

clean_rn_cache() {
    echo ">>>> clean_rn_cache <<<<"
    watchman watch-del-all
    rm -rf node_modules
    yarn
    clean_derived_data
    rm -rf /tmp/metro-*
    yarn start --reset-cache
}

eval "$(rbenv init -)"
