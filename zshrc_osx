if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

export TERM=xterm-256color

# Path to oh-my-zsh configuration
export ZSH=$HOME/.oh-my-zsh

# Zsh theme and plugins
ZSH_THEME="powerlevel10k/powerlevel10k"
plugins=(
  git
  alias-tips
  zsh-autosuggestions
  zsh-syntax-highlighting
  git-flow
)

source $ZSH/oh-my-zsh.sh

# CLI Utilities Setup

# zoxide
eval "$(zoxide init zsh)"

# nvm
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm

# ALIASES

bindkey "^ " forward-word
alias gw="git sweep"
alias gwc="git sweep-check"
alias cat="bat"
alias speed="speedtest-cli"
alias notify="tput bel"
alias h="history"
alias g="grep"
alias c="cargo"

# Enable exa instead of ls, if it is installed
if [ "$(command -v exa)" ]; then
    unalias -m 'll'
    unalias -m 'l'
    unalias -m 'la'
    unalias -m 'ls'
    alias ll='exa -l --color always --icons -a -s type'
    alias l='exa -l --color always --icons -a -s type'
    alias la='exa -l --color always --icons -a -s type'
    alias ls='exa -G  --color auto --icons -a -s type'
fi

# Theme config
DEFAULT_USER=$USER
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(dir_writable dir vcs)
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=()
POWERLEVEL9K_SHORTEN_DIR_LENGTH=1
POWERLEVEL9K_SHORTEN_STRATEGY="truncate_from_right"
POWERLEVEL9K_SHORTEN_DELIMITER=""

# Checks iTerm2 shell integration
test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# coreutils
export PATH=/usr/local/opt/coreutils/libexec/gnubin:$PATH

# Node global commands path
export PATH=/usr/local/Cellar/node/15.12.0/bin:$PATH

# React-Native env variables
export ANDROID_HOME=$HOME/Library/Android/sdk
export PATH=$PATH:$ANDROID_HOME/emulator
export PATH=$PATH:$ANDROID_HOME/tools
export PATH=$PATH:$ANDROID_HOME/tools/bin
export PATH=$PATH:$ANDROID_HOME/platform-tools

# PHP env variables
export PATH=/usr/local/opt/php@7.4/bin:$PATH
export PATH=/usr/local/opt/php@7.4/sbin:$PATH

# spicetify
export PATH=$PATH:/Users/Giorgio/.spicetify

# Rust Cross-compiling
export CC_x86_64_unknown_linux_gnu=x86_64-unknown-linux-gnu-gcc
export CXX_x86_64_unknown_linux_gnu=x86_64-unknown-linux-gnu-g++
export AR_x86_64_unknown_linux_gnu=x86_64-unknown-linux-gnu-ar
export CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=x86_64-unknown-linux-gnu-gcc
export CC_aarch64_unknown_linux_gnu=aarch64-unknown-linux-gnu-gcc
export CXX_aarch64_unknown_linux_gnu=aarch64-unknown-linux-gnu-g++
export AR_aarch64_unknown_linux_gnu=aarch64-unknown-linux-gnu-ar
export CARGO_TARGET_aarch64_UNKNOWN_LINUX_GNU_LINKER=aarch64-unknown-linux-gnu-gcc

# Custom commands

# Generic purpose

propic() {
    echo ">>>> downloading propic <<<<"
    curl -o propic.jpeg "https://gravatar.com/avatar/3d2746ae6d5b422213088b12ebab1131?s=1000"
}

find_raspberry() {
    arp -na | grep -i "28:cd:c1\|b8:27:eb\|dc:a6:32\|e4:5f:1" | awk -F "[()]" '{print $2}'
}

find_raspberry_loop() {
    while true;
    do
        OUTPUT=$(arp -na | grep -i "28:cd:c1\|b8:27:eb\|dc:a6:32\|e4:5f:1" | awk -F "[()]" '{print $2}')
        if ! [ -z "$OUTPUT" ]
        then
            echo $OUTPUT
        fi
        
        sleep 2
    done
}

listen_raspberry() {
    while true;
    do
        OUTPUT=$(arp -na | grep -i "28:cd:c1\|b8:27:eb\|dc:a6:32\|e4:5f:1" | awk -F "[()]" '{print $2}')
        if ! [ -z "$OUTPUT" ]
        then
            echo $OUTPUT
            break
        fi

        sleep 2
    done
}


# Hoppscotch

hoppscotch() {
    echo ">>>> starting hoppscotch <<<<"
    if (( $# == 0 ))
    then HOPPSCOTCH_PORT=3000
    else HOPPSCOTCH_PORT=$1
    fi
    docker run --detach --rm --name hoppscotch -p $HOPPSCOTCH_PORT:3000 hoppscotch/hoppscotch:latest
    open http://localhost:$HOPPSCOTCH_PORT/
}

hoppscotch_stop() {
    echo ">>>> stopping hoppscotch <<<<"
    docker stop hoppscotch
}

# Mobile development

clean_derived_data() {
    echo ">>>> cleaning Xcode DerivedData folder <<<<"
    rm -rf ~/Library/Developer/Xcode/DerivedData
}

# React Native

clean_rn_ios() {
    echo ">>>> clean_rn_ios <<<<"
    echo ">>>> yarn install, pod install and run on iOS <<<<"
    yarn
    cd ios
    pod install
    cd ..
    yarn ios
}

clean_rn_android() {
    echo ">>>> clean_rn_android <<<<"
    echo ">>>> yarn install, clear Gradle cache and run on Android <<<<"
    yarn
    cd android
    ./gradlew clean
    ./gradlew cleanBuildCache
    cd ..
    yarn android
}

clean_rn_cache() {
    echo ">>>> clean_rn_cache <<<<"
    watchman watch-del-all
    rm -rf node_modules
    yarn
    clean_derived_data
    rm -rf /tmp/metro-*
    yarn start --reset-cache
}

# Flutter Web

flutter_web_deploy() {
    echo ">>>> flutter_web_deploy <<<<"
    echo ">>>> build and deploy Flutter Web on Firebase hosting <<<<"
    flutter build web
    cd build/web
    firebase deploy
    cd ../..
}

eval "$(rbenv init -)"
